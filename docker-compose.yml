version: '3.8'

services:
  # Tor service for proxy chaining
  tor:
    image: alpine:3.19
    container_name: proxyhawk-tor
    command: >
      sh -c "
      apk add --no-cache tor &&
      mkdir -p /var/lib/tor &&
      chown -R tor:tor /var/lib/tor &&
      tor -f /etc/tor/torrc
      "
    volumes:
      - ./docker/torrc:/etc/tor/torrc:ro
      - tor_data:/var/lib/tor
    ports:
      - "9050:9050"  # SOCKS5 proxy
      - "9051:9051"  # Control port
    restart: unless-stopped
    networks:
      - proxyhawk-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9050"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ProxyHawk dual-mode server with proxy chaining and Tor
  proxyhawk-server:
    build: .
    container_name: proxyhawk-server
    ports:
      - "1080:1080"  # SOCKS5 proxy
      - "8080:8080"  # HTTP proxy
      - "8888:8888"  # WebSocket API
      - "9090:9090"  # Metrics
    volumes:
      - ./config:/app/config:ro
      - ./output:/app/output
      - server_logs:/app/logs
    environment:
      - TOR_PROXY=tor:9050
      - TOR_CONTROL=tor:9051
    command: [
      "--config", "config/examples/proxy-chaining.yaml",
      "--mode", "dual",
      "--socks5-addr", ":1080",
      "--http-addr", ":8080", 
      "--api-addr", ":8888",
      "--metrics-addr", ":9090",
      "-v"
    ]
    restart: unless-stopped
    networks:
      - proxyhawk-network
    depends_on:
      tor:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Basic ProxyHawk service for proxy checking (legacy mode)
  proxyhawk:
    build: .
    container_name: proxyhawk
    entrypoint: ["./proxyhawk"]  # Use legacy checker
    volumes:
      # Mount proxy list file
      - ./test-proxies.txt:/app/proxies.txt:ro
      # Mount custom configuration
      - ./config:/app/config:ro
      # Mount output directory for results
      - ./output:/app/output
    command: [
      "--config", "config/default.yaml",
      "-l", "proxies.txt",
      "-o", "output/results.txt",
      "-j", "output/results.json",
      "--no-ui",
      "-v"
    ]
    restart: unless-stopped
    networks:
      - proxyhawk-network

  # ProxyHawk with metrics enabled for monitoring
  proxyhawk-metrics:
    build: .
    container_name: proxyhawk-metrics
    ports:
      - "9090:9090"  # Prometheus metrics endpoint
    volumes:
      - ./test-proxies.txt:/app/proxies.txt:ro
      - ./config:/app/config:ro
      - ./output:/app/output
    command: [
      "--config", "config/metrics-example.yaml",
      "-l", "proxies.txt",
      "-o", "output/metrics-results.txt",
      "-j", "output/metrics-results.json",
      "--metrics",
      "--metrics-addr", ":9090",
      "--no-ui",
      "-v"
    ]
    restart: unless-stopped
    networks:
      - proxyhawk-network
    depends_on:
      - prometheus

  # ProxyHawk with authentication support
  proxyhawk-auth:
    build: .
    container_name: proxyhawk-auth
    volumes:
      - ./test-proxies.txt:/app/proxies.txt:ro
      - ./config:/app/config:ro
      - ./output:/app/output
    command: [
      "--config", "config/auth-example.yaml",
      "-l", "proxies.txt",
      "-o", "output/auth-results.txt",
      "-j", "output/auth-results.json",
      "--no-ui",
      "-v"
    ]
    restart: unless-stopped
    networks:
      - proxyhawk-network

  # ProxyHawk with advanced security testing
  proxyhawk-security:
    build: .
    container_name: proxyhawk-security
    volumes:
      - ./test-proxies.txt:/app/proxies.txt:ro
      - ./config:/app/config:ro
      - ./output:/app/output
    command: [
      "--config", "config/production.yaml", 
      "-l", "proxies.txt",
      "-o", "output/security-results.txt",
      "-j", "output/security-results.json",
      "--no-ui",
      "-v",
      "-d"  # Enable debug for detailed security testing output
    ]
    restart: unless-stopped
    networks:
      - proxyhawk-network

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - proxyhawk-network

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - proxyhawk-network
    depends_on:
      - prometheus

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  tor_data:
    driver: local
  server_logs:
    driver: local

networks:
  proxyhawk-network:
    driver: bridge